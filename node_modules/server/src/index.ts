import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import 'express-async-errors';
import { PrismaClient } from '@prisma/client';
import { z } from 'zod';

dotenv.config();

const app = express();
const prisma = new PrismaClient();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// Validation schemas
const createLinkSchema = z.object({
  url: z.string().url(),
  title: z.string().min(1),
  description: z.string().optional(),
});

const updateLinkSchema = createLinkSchema.partial();

// Routes
app.post('/api/links', async (req: Request, res: Response) => {
  const data = createLinkSchema.parse(req.body);
  const link = await prisma.link.create({ data });
  res.status(201).json(link);
});

app.get('/api/links', async (req: Request, res: Response) => {
  const links = await prisma.link.findMany({
    orderBy: { createdAt: 'desc' },
  });
  res.json(links);
});

app.get('/api/links/:id', async (req: Request, res: Response) => {
  const { id } = req.params;
  const link = await prisma.link.findUnique({
    where: { id },
  });
  if (!link) {
    return res.status(404).json({ error: 'Link not found' });
  }
  res.json(link);
});

app.put('/api/links/:id', async (req: Request, res: Response) => {
  const { id } = req.params;
  const data = updateLinkSchema.parse(req.body);
  const link = await prisma.link.update({
    where: { id },
    data,
  });
  res.json(link);
});

app.delete('/api/links/:id', async (req: Request, res: Response) => {
  const { id } = req.params;
  await prisma.link.delete({
    where: { id },
  });
  res.status(204).send();
});

// Error handling middleware
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  if (err instanceof z.ZodError) {
    return res.status(400).json({ error: err.errors });
  }
  console.error(err);
  res.status(500).json({ error: 'Internal server error' });
});

// Start server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
}); 